datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Customer {
  id                  String            @id @unique @default(cuid())
  firstName           String
  lastName            String
  address             String
  annualSalary        Float
  age                 Int
  isSpecialCustomer   Boolean           @default(false)
  overdraftPercentage Float?            @default(0)
  longtermDeposits    longTermDeposit[]
  simpleDeposits      simpleDeposit[]
  withdrawDeposits    withdrawDeposit[]
  cards               Card[]
  transactions        Transaction[]
}

model Admin {
  id       String @id @unique @default(cuid())
  username String
  password String
}

model longTermDeposit {
  id         String    @id @unique @default(cuid())
  balance    Float
  isFrozen   Boolean   @default(false)
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@index([customerId])
}

model simpleDeposit {
  id         String    @id @unique @default(cuid())
  balance    Float
  isFrozen   Boolean   @default(false)
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@index([customerId])
}

model withdrawDeposit {
  id         String    @id @unique @default(cuid())
  balance    Float
  isFrozen   Boolean   @default(false)
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@index([customerId])
}

model Transaction {
  id         String    @id @unique @default(cuid())
  amount     Float?
  createdAt  DateTime? @default(now())
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Card {
  id         String    @id @unique @default(cuid())
  cardNumber Int?
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

// Create account chosen 
// Create others with it and set is as is frozen 
// Add is special logic if salary is over 30k
// Have dummy user with 10 previous tranactions
// Put a overdraft percentage for special customers 
// Blocked account / is frozen make them un frozen
